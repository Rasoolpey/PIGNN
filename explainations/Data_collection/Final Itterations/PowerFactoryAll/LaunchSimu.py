# main.py
"""
SCRIPT PRINCIPAL - G√âN√âRATEUR DE SC√âNARIOS COMPLET AVEC FILTRAGE INTELLIGENT
=============================================================================

Point d'entr√©e principal pour l'ex√©cution du g√©n√©rateur de sc√©narios.
Utilise tous les modules pour orchestrer la g√©n√©ration compl√®te.

Usage:
    python main.py

Configuration:
    Modifiez les variables PROJECT, STUDY, et MODE selon vos besoins.
"""

import sys
import os
import time
from datetime import datetime

# Import du module orchestrateur principal
from Storage import H5StorageOrchestrator

# ‚îÄ‚îÄ Configuration (adaptable) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
PROJECT = "39 Bus New England System"  # Modifiable
STUDY = "RMS_Simulation"
BASE_DIR = os.path.join(os.getcwd(), "scenario_analysis")

def main():
    """
    Script entry point - executes comprehensive scenario generation
    WITH SINGLE INITIAL POWER BALANCE CORRECTION AND INTELLIGENT FILTERING
    """
    print("üöÄ G√âN√âRATEUR DE SC√âNARIOS COMPLET AVEC FILTRAGE INTELLIGENT")
    print("=" * 70)
    print(f"üìÖ D√©but d'ex√©cution: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"üîí STRAT√âGIE: √âquilibrage initial unique - Pas de r√©√©quilibrage par sc√©nario")
    print(f"üö´ FILTRAGE: Exclusion gen/gen, gen/load, load/load des doubles")
    print(f"‚úÖ INCLUSION: TOUS les autres sc√©narios possibles")
    print(f"üéØ Projet: {PROJECT}")
    print(f"üìÅ R√©pertoire de sortie: {BASE_DIR}")
    print()
    
    try:
        # Execute comprehensive scenario generation
        start_time = time.time()
        
        # Initialize orchestrator
        orchestrator = H5StorageOrchestrator(BASE_DIR, PROJECT, STUDY)
        
        # Run complete generation
        results = orchestrator.main_scenario_generation_comprehensive()
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        print(f"\n‚è±Ô∏è  TEMPS D'EX√âCUTION TOTAL: {execution_time/60:.1f} minutes")
        print(f"üéØ G√âN√âRATION TERMIN√âE AVEC SUCC√àS!")
        
        if results:
            print(f"\nüìä STATISTIQUES FINALES:")
            print(f"   ‚Ä¢ Mode de g√©n√©ration: {results['generation_info']['generation_mode']}")
            print(f"   ‚Ä¢ Sc√©narios g√©n√©r√©s: {results['generation_info']['successful_scenarios'] + 1}")
            print(f"   ‚Ä¢ Sc√©narios simples: {results['scenario_breakdown']['single_scenarios']}")
            print(f"   ‚Ä¢ Sc√©narios doubles: {results['scenario_breakdown']['double_scenarios']}")
            print(f"   ‚Ä¢ Taux de succ√®s: {results['generation_info']['success_rate_percent']}%")
            print(f"   ‚Ä¢ Strat√©gie √©quilibrage: {results['generation_info']['power_balance_strategy']}")
            print(f"   ‚Ä¢ R√©√©quilibrage par sc√©nario: {results['generation_info']['balance_recalculated_per_scenario']}")
            print(f"   ‚Ä¢ Filtrage appliqu√©: {results['generation_info']['scenario_filtering_applied']}")
            print(f"   ‚Ä¢ R√®gles de filtrage: {results['generation_info']['filtering_rules']}")
            print(f"   ‚Ä¢ G√©n√©rateurs ajust√©s initialement: {results['power_balance_info']['balanced_generators_count']}")
            print(f"   ‚Ä¢ D√©s√©quilibre final baseline: {results['power_balance_info']['baseline_imbalance_MW']:.1f} MW")
            print(f"   ‚Ä¢ Buses avec sensibilit√©: {results['system_info']['successful_sensitivity_buses']}")
        
        print(f"\n‚úÖ TOUS LES FICHIERS H5 SONT PR√äTS POUR VOS MOD√àLES GNN!")
        print(f"üîë AVANTAGES DE CETTE APPROCHE:")
        print(f"   ‚Ä¢ ‚ö° Plus rapide (pas de r√©√©quilibrage r√©p√©titif)")
        print(f"   ‚Ä¢ üéØ Coh√©rent (m√™me √©tat de base pour tous les sc√©narios)")
        print(f"   ‚Ä¢ üß™ Isol√© (seul l'effet de la panne est √©tudi√©)")
        print(f"   ‚Ä¢ üìä Comparable (tous les sc√©narios sur la m√™me base)")
        print(f"   ‚Ä¢ üö´ Filtr√© (exclusion des combinaisons probl√©matiques)")
        print(f"   ‚Ä¢ üîç Complet (tous les sc√©narios autoris√©s sont inclus)")
        
        return 0  # Success
        
    except Exception as e:
        print(f"\n‚ùå ERREUR DURANT L'EX√âCUTION:")
        print(f"   {str(e)}")
        import traceback
        traceback.print_exc()
        
        print(f"\nüîß SUGGESTIONS DE D√âBOGAGE:")
        print(f"   1. V√©rifiez que PowerFactory est ouvert")
        print(f"   2. V√©rifiez le nom du projet dans la configuration")
        print(f"   3. V√©rifiez que le study case existe")
        print(f"   4. V√©rifiez les permissions d'√©criture dans le r√©pertoire")
        print(f"   5. V√©rifiez que le syst√®me initial peut √™tre √©quilibr√©")
        
        return 1  # Error
        
    finally:
        print(f"\nüìÖ Fin d'ex√©cution: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 70)

def run_custom_configuration():
    """Exemple d'utilisation avec configuration personnalis√©e"""
    
    config = {
        'project': '39 Bus New England System',
        'study': 'RMS_Simulation',
        'output_dir': './custom_scenario_analysis'
    }
    
    print("üîß Ex√©cution avec configuration personnalis√©e...")
    
    orchestrator = H5StorageOrchestrator(
        config['output_dir'], 
        config['project'], 
        config['study']
    )
    
    results = orchestrator.run_generation_pipeline(config)
    return results

def run_baseline_only():
    """Exemple d'utilisation pour g√©n√©rer seulement le baseline"""
    
    print("üìä G√©n√©ration du baseline seulement...")
    
    # Cette fonctionnalit√© peut √™tre ajout√©e dans l'orchestrateur
    # pour des tests rapides ou des analyses sp√©cifiques
    
    orchestrator = H5StorageOrchestrator(BASE_DIR, PROJECT, STUDY)
    
    # Connect and setup
    app = orchestrator.pf_engine.connect_and_setup()
    orchestrator.balance_manager = PowerBalanceManager(orchestrator.pf_engine)
    orchestrator.data_engine = DataAnalysisEngine(orchestrator.pf_engine)
    
    # Balance system
    balance_success, balanced_state = orchestrator.balance_manager.initialize_and_balance_system()
    
    if balance_success:
        # Generate only baseline
        if orchestrator.pf_engine.solve_power_flow():
            baseline_data = orchestrator.data_engine.collect_system_data()
            Y_matrix, Y_sparse = orchestrator.data_engine.construct_admittance_matrix(baseline_data)
            dV_dP, success_flags = orchestrator.data_engine.calculate_voltage_sensitivity_numerical(baseline_data)
            
            baseline_scenario = {
                'scenario_name': 'baseline',
                'scenario_type': 'baseline',
                'outage_element': 'none',
                'convergence': True,
                'system_data': baseline_data,
                'Y_matrix': Y_matrix,
                'Y_sparse': Y_sparse,
                'sensitivity_dV_dP': dV_dP,
                'sensitivity_success_flags': success_flags,
                'power_balance_info': 'Initial system balancing completed',
                'balanced_state_applied': True
            }
            
            # Save baseline only
            baseline_h5_file = os.path.join(BASE_DIR, "baseline_only.h5")
            orchestrator.save_scenario_to_h5(baseline_h5_file, 'baseline', baseline_scenario)
            
            print(f"‚úÖ Baseline saved to: {baseline_h5_file}")
            return baseline_scenario
    
    return None

if __name__ == "__main__":
    """
    Point d'entr√©e principal du script
    """
    
    # V√©rifier les arguments de ligne de commande pour des modes sp√©ciaux
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        
        if mode == "baseline":
            print("üéØ Mode baseline seulement")
            result = run_baseline_only()
            sys.exit(0 if result else 1)
            
        elif mode == "custom":
            print("üéØ Mode configuration personnalis√©e")
            result = run_custom_configuration()
            sys.exit(0 if result else 1)
            
        elif mode == "help":
            print("üìã UTILISATION:")
            print("   python main.py              # Ex√©cution normale compl√®te")
            print("   python main.py baseline     # G√©n√©ration baseline seulement")
            print("   python main.py custom       # Configuration personnalis√©e")
            print("   python main.py help         # Afficher cette aide")
            print()
            print("üìù CONFIGURATION:")
            print(f"   Projet PowerFactory: {PROJECT}")
            print(f"   Study case: {STUDY}")
            print(f"   R√©pertoire de sortie: {BASE_DIR}")
            print()
            print("üîß MODIFICATION:")
            print("   √âditez les variables PROJECT, STUDY, BASE_DIR dans main.py")
            sys.exit(0)
            
        else:
            print(f"‚ùå Mode '{mode}' non reconnu. Utilisez 'python main.py help' pour l'aide.")
            sys.exit(1)
    
    # Ex√©cution normale
    exit_code = main()
    sys.exit(exit_code)